=========================================================================================================
Mon Mar  7 14:48:58 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//save()함수를 작성하였다.
//qsort()를 하기로 한다.
//-----------------------------------------------------------------------------------

#include<iostream>
#include"save.h"
using namespace std;
//하드에 기록한다.

void main()
{
	cout << "save만든기념으로 저장." << endl;
	save();
}=========================================================================================================
Mon Mar  7 15:16:38 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//save()함수를 작성하였다.
//qsort()를 하기로 한다.
//-----------------------------------------------------------------------------------

#include<iostream>
#include"save.h"
using namespace std;
//하드에 기록한다.
//인터넷 컴페어.
//int compare(const void *first, const void *second)
//{
//	if (*(int*)first > *(int*)second)
//		return 1;
//	else if (*(int*)first < *(int*)second)
//		return -1;
//	else
//		return 0;
//}

int f(const void* a, const void* b)
{
	//void* 는 아무때나 형변환 해도 된다느 의미.
	int x = *(int*)a;
	int y = *(int*)b;

	if (x < y)
	{
		return 1;
	}
	else if (x > y)
	{
		return -1;
	}
	else
	{
		return 0;
	}
}
void main()
{
	int a[] = { 2,4,6,8,10,1,3,5,7,9 };
	for (auto d : a)
	{
		cout << d << " ";
	}
	cout << endl;
	qsort(a, sizeof(a) / sizeof(int), sizeof(a[0]), f);
	for (auto d : a)
	{
		cout << d << " ";
	}
	cout << endl;
	save();
}=========================================================================================================
Mon Mar  7 15:18:13 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//save()함수를 작성하였다.
//qsort()를 하기로 한다.
//-----------------------------------------------------------------------------------

#include<iostream>
#include"save.h"
using namespace std;
//하드에 기록한다.
//인터넷 컴페어.
//int compare(const void *first, const void *second)
//{
//	if (*(int*)first > *(int*)second)
//		return 1;
//	else if (*(int*)first < *(int*)second)
//		return -1;
//	else
//		return 0;
//}

int f(const void* a, const void* b)
{
	//void* 는 아무때나 형변환 해도 된다느 의미.
	int x = *(int*)a;
	int y = *(int*)b;

	if (x < y)
	{
		return 1;
	}
	else if (x > y)
	{
		return -1;
	}
	else
	{
		return 0;
	}
}
void main()
{
	int a[10000] ;

	for (auto& d : a)
	{
		d = rand();
	}
	
	cout << endl;
	qsort(a, sizeof(a) / sizeof(int), sizeof(a[0]), f);
	for (auto d : a)
	{
		cout << d << " ";
	}
	cout << endl;
	save();
}=========================================================================================================
Fri Mar 11 14:05:08 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//(2주차 3.11일)
//qsort()를 하기로 한다.
//random 값 생성방법. -- 17장
//파일에 입출력
//객체 정렬.
//-----------------------------------------------------------------------------------

#include<iostream>
#include"save.h"
#include<random>
#include<fstream>
using namespace std;
//하드에 기록한다.
//인터넷 컴페어.
//int compare(const void *first, const void *second)
//{
//	if (*(int*)first > *(int*)second)
//		return 1;
//	else if (*(int*)first < *(int*)second)
//		return -1;
//	else
//		return 0;
//}

int f(const void* a, const void* b)
{
	//void* 는 아무때나 형변환 해도 된다느 의미.
	int x = *(int*)a;
	int y = *(int*)b;

	if (x < y)
	{
		return -1;
	}
	else if (x > y)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}
#define DATA_MAXIMUN_NUM 10000
void main()
{
	//메모리에 세구간으로 나뉘어져있다.
	//코드,데이타,스택 이렇게 3구간으로 나뉘어져있는데 스택구간은 기본으로 1m로 되있다.
	//따라서 메인메모리에다 데이타를 넣고 데이타구간에는 메인메모리 주소를 가리킨다.
	//int a[1000000]; // 안에다 선언하면 스택오버플로우 발생!

	
	int *a = new int[DATA_MAXIMUN_NUM];

	//c++ 11 의 random사용.
	//1.random엔진을 생성한다.
	default_random_engine dre;
	//2.확률분포를 결정한다.
	//normal_distribution<> nd(0,0.01);
	uniform_int_distribution<> ui; //0~ 1000사이값
	//for (auto& d : a)//범위기반이라 포인터론 쓸수없슴.
	for (auto i = 0; i < DATA_MAXIMUN_NUM; ++i)
	{
		a[i] = ui(dre);//rand함수값의 범위는 0~32767 이것은 32비트의 정수값을 뽑아줌.
	}
	
	cout << endl;

	int (*xxx)(const void*,const void*) = (int(*)(const void*, const void *))f; // 함수의 포인터 선언 후 f포인터 를 대입.
	
	auto* xx = f;

	qsort(a, DATA_MAXIMUN_NUM, sizeof(a[0]), xx);
	
	ofstream out("장미만송이.txt",ios::binary);


	out.write((const char*)a, sizeof(int) *10000); // 정확하게 4만바이트.아스키로 기록.
	//화면출력하지 말고 파일에 기록하라.
	/*for (auto i = 0; i < DATA_MAXIMUN_NUM; ++i)
	{
		
		out << a[i] << " ";
		
		
	}*/
	out.close();

	delete[] a;
	save();
}=========================================================================================================
Fri Mar 11 14:12:11 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//(2주차 3.11일)
//qsort()를 하기로 한다.
//random 값 생성방법. -- 17장
//파일에 출력
//객체 정렬.
//-----------------------------------------------------------------------------------

#include<iostream>
#include"save.h"
#include<random>
#include<fstream>
using namespace std;

void main()
{
	int* p = new int[10000];
	ifstream in("장미만송이.txt",iostream::binary);

	in.read((char*)p, 40000);//이런식으로 프로그래밍 하면 해킹의 위험이 있슴.

	for (int i = 0; i < 10000; ++i)
	{
		cout << p[i] <<" "  ;
	}
	save();
}=========================================================================================================
Fri Mar 11 14:17:38 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//(2주차 3.11일)
//qsort()를 하기로 한다.
//random 값 생성방법. -- 17장
//파일에 출력
//객체 정렬.
//-----------------------------------------------------------------------------------

#include<iostream>
#include"save.h"
#include<random>
#include<algorithm>
#include<string>
#include<vector>
using namespace std;

void main()
{
	vector<string> s{ "안녕","봄이","놀러가고 싶어" };
	//c++에서는 알고리즘 함수 sort() 로 정렬한다.

	for (auto a : s)
	{
		cout << a << endl;
	}

	sort(s.begin(), s.end(), [](string a, string b) {return a > b; });

	for (auto a : s)
	{
		cout << a << endl;
	}
	save();
}=========================================================================================================
Mon Mar 14 14:41:09 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//(3주차 3.14일)
//qsort()를 하기로 한다.
//random 값 생성방법. -- 17장
//파일에 출력
//객체 정렬.
//-----------------------------------------------------------------------------------

#include<iostream>
#include"save.h"
#include<random>
#include<algorithm>
#include<string>
#include<vector>
using namespace std;
class Dog
{
private:
	string month;
	int age;
public:
	Dog() {};
	Dog(const char* month,int age);
	~Dog() {};
	string GetMonth()const { return month; }
	int GetAge() const { return age; }

};

ostream& operator<<(ostream& os,const Dog& dog)
{
	os << dog.GetMonth() << "-"<< dog.GetAge();
	return os;
}
void main()
{
	Dog a[]{ {"4월",3} ,{"2월",5},{"3월",2} };

	//나이순으로 정렬하라
	//sort(begin(a), end(a), [](const Dog& a,const Dog& b) {return a.GetAge() < b.GetAge(); });
	//sorting by name
	sort(begin(a), end(a), [](const Dog& a, const Dog& b)->bool {return a.GetMonth() < b.GetMonth(); });

	for (Dog d : a)
	{
		cout << d << endl;
	}
	save();
}

Dog::Dog(const char* month, int age) : age(age),month(month)
{
}
=========================================================================================================
Mon Mar 14 15:18:39 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//(3주차 3.14일)
//책순서를 살펴봄.
//auto,일관된 초기화,범위기반의 for loop,
//이동문맥과 r-value참조(다음시간 클리스 복습에서 다룸)
//람다
//이후 smart pointer 
//-----------------------------------------------------------------------------------

#include<iostream>
#include"save.h"
#include<string>
#include<vector>
#include<algorithm>
using namespace std;

//auto
//자료형 자체가 복잡해서 그래도 쓰는것이 불편할때 사용.
//- 함수의 리턴값이 정해지지 않을때 사용.
void main()
{
	//int a[10] //더이상 늘릴수 없는 배열.
	//동적 = 프로그램 실행시 정적 = 컴파일 될때.
	//int a[];//컴파일 진행시 알아야 하는데 모름.
	vector<string> v{ "아델 ","헬로우" ,"스카이폴","19","21","25"};

	//sort(v.begin(), v.end());

	vector<string>::iterator i = v.begin();
	cout << (*i) << endl;

	for (auto p = v.begin(); p != v.end(); ++p)
	{
		cout << (*p) << endl;
	}
	
	save();
}=========================================================================================================
Fri Mar 18 12:57:40 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//(3주차 3.18일)
//책순서를 살펴봄.
//auto,일관된 초기화,범위기반의 for loop,
//이동문맥과 r-value참조(다음시간 클리스 복습에서 다룸)
//람다
//이후 smart pointer 
//-----------------------------------------------------------------------------------

#include<iostream>
#include"save.h"
#include<string>
#include<vector>
#include<algorithm>
using namespace std;
template<class T>
void Change(T& a, T& b)
{
	T temp(a); 
	a(b);
	b(temp);
}

class Monster
{
private:
	int a;
public:
	Monster(int a) { this->a = a; };
	~Monster() {};
};
//일관된 초기화 uniform initialization
//초기화는 RAII 이다. (Resource Acquisition Is Initialize)자원을 얻어오는것 자체가 초기화이다.
void main()
{
	//원래 int n = 100 인데 2003년에 int n(100) 으로 바뀌었고 최근엔 int n{100} 으로 바뀌었다.
	//class 초기화마냥 바뀌었다.

	Monster a[10] = {1,2,3,4,5,6,7,8,9,10};


		save();
}=========================================================================================================
Fri Mar 18 13:09:48 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//(3주차 3.18일)
//책순서를 살펴봄.
//auto,일관된 초기화,범위기반의 for loop,
//이동문맥과 r-value참조(다음시간 클리스 복습에서 다룸)
//람다
//이후 smart pointer 
//-----------------------------------------------------------------------------------

#include<iostream>
#include"save.h"
#include<string>
#include<vector>
#include<algorithm>
using namespace std;

//범위기반 for루프
void main()
{
	int a[]{ 1,2,3,4,5 };
	//decl= 선언 coll= collection 
	//유용한점은 전체에 크기에 대해 훨신 유용하다.
	for (int &d : a)
		cout << (d*= d )<< endl;

	for (int i = 3; i < 19; ++i)
	{
		a[i] *= a[i];
	}

	for (int d : a)
		cout << d << " ";


		save();
}=========================================================================================================
Fri Mar 18 13:49:20 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//(3주차 3.18일)
//책순서를 살펴봄.
//auto,일관된 초기화,범위기반의 for loop,
//이동문맥과 r-value참조(다음시간 클리스 복습에서 다룸)
//람다
//이후 smart pointer 
//-----------------------------------------------------------------------------------

#include<iostream>
#include"save.h"
#include<string>
#include<vector>
#include<algorithm>
using namespace std;

class Model {
	char* data{ nullptr };
	size_t size{ 0 };
public:
	Model(const int& size):size(size) {
		data = new char[size];
		cout << "생성자" << size << endl;
	};
	Model() { cout << "디폴트 생성자" << size << endl; };
	
	~Model() {
		if (data != nullptr)
		{
			delete[] this->data;
		}
		cout << "소멸자" << size << endl;
	};
	size_t GetSize() { return size; }
	char* GetData() { return data; }

	void operator=(Model& another)
	{
		this->data = another.GetData();
		if (this->data)
		{
			this->data = nullptr;
			this->data = new char[another.GetSize()];
		}
		cout << "operator 완료" << endl;
	}
};
void main()
{
	Model a;
	Model b(1000);
	cout << (b.GetSize()) << endl;
	cout << sizeof(b.GetData()) << endl;

	Model c = b;
	cout << c.GetSize() << endl;
		save();
}=========================================================================================================
Mon Mar 21 14:31:12 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//(3주차 3.21일 )
//책순서를 살펴봄.
//5주 1일차 퀴즈예정(다음주 금요일)
//람다
//이후 smart pointer 
//-----------------------------------------------------------------------------------
#include<string>
#include<iostream>
#include"save.h"
#include<string>
#include<vector>
#include<algorithm>
using namespace std;
int g_id = 0;

class Model {
	char* data{ nullptr };
	size_t size{ 0 };
	int id;
public:
	Model(const int& size) :size(size) {
		id = ++g_id;
		data = new char[size];
		cout << "[" << id << "]" << "생성자" << size << endl;
	};

	Model() { 
		id = ++g_id;
		cout << "[" << id <<"]"<< "디폴트 생성자" << size << endl; };

	Model(const Model &other)
	{
		id = ++g_id;

		size = other.size;
		data = new char[size];
		memcpy(data, other.data, size);
		cout << "[" << id << "]"<< "복사생성자" << size <<  endl;
	}
	Model(Model&& other) : data(nullptr), size(other.size), id(++g_id)
	{
		data = other.data;
		other.data = nullptr;
		other.size = 0;
		cout << "[" << id << "]" << "이동생성자" << size << endl;
	}
	~Model() {
		if (data != nullptr)
		{
			delete[] this->data;
		}
		cout << "[" << id << "]" << "소멸자" << size << endl;
	};

	Model& operator=(const Model& other)
	{
		if (data != nullptr)
			delete[] data;
		size = other.size;
		data = new char[size];
		memcpy(data, other.data, size);

		cout << "할당연산자" << endl;
		return *this;
	}

	size_t GetSize() { return size; }
	char* GetData() { return data; }


};

void main()
{
	Model a(1000);
	Model b = move(a);
	//a = b;      //assignment,할당 ,대입
		save();
}=========================================================================================================
Fri Mar 25 13:20:42 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//(3주차 3.21일 )
//책순서를 살펴봄.
//5주 1일차 퀴즈예정(다음주 금요일)
//4장 namespace ,예외처리,호출가능객체.
//5장 pair, smart pointer 
//이동의미론 시험에 나옴******* = 이동가능하다면 무조건 이동한다,불가능하다면 복사한다.
//STL사용하려면 이동생성자 이동대입연산자 만들어야 함.
//메모리상태 그림그려보는게 중요함.
//-----------------------------------------------------------------------------------
#include<iostream>
#include<cstdlib>
//namespace std {
//#include<cstdio>
//}//cstdio 가 해주는 역할.
#include"save.h"
using namespace std;
//namespace 가 만들어진이유: 프로그램이 커져서,여러명이 프로그래밍 하면서 변수이름이 겹칠수도 있슴.
//

void main()
{
	printf("%03d\n", 13);
	save();
}=========================================================================================================
Fri Mar 25 13:33:12 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//(3주차 3.21일 )
//책순서를 살펴봄.
//5주 1일차 퀴즈예정(다음주 금요일)
//4장 namespace ,예외처리,호출가능객체.
//5장 pair, smart pointer 
//이동의미론 시험에 나옴******* = 이동가능하다면 무조건 이동한다,불가능하다면 복사한다.
//STL사용하려면 이동생성자 이동대입연산자 만들어야 함.
//메모리상태 그림그려보는게 중요함.
//-----------------------------------------------------------------------------------
#include<iostream>
#include<cstdlib>
//namespace std {
//#include<cstdio>
//}//cstdio 가 해주는 역할.
#include"save.h"
using namespace std;
//namespace 가 만들어진이유: 프로그램이 커져서,여러명이 프로그래밍 하면서 변수이름이 겹칠수도 있슴.
//

void main()
{
	printf("%03d\n", 13);
	save();
}=========================================================================================================
Fri Mar 25 13:42:14 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//(3주차 3.21일 )
//책순서를 살펴봄.
//5주 1일차 퀴즈예정(다음주 금요일)
//4장 namespace ,예외처리,호출가능객체.
//5장 pair, smart pointer 
//이동의미론 시험에 나옴******* = 이동가능하다면 무조건 이동한다,불가능하다면 복사한다.
//STL사용하려면 이동생성자 이동대입연산자 만들어야 함.
//메모리상태 그림그려보는게 중요함.
//-----------------------------------------------------------------------------------
#include<iostream>
#include<cstdlib>
//namespace std {
//#include<cstdio>
//}//cstdio 가 해주는 역할.
#include"save.h"
using namespace std;
//namespace 가 만들어진이유: 프로그램이 커져서,여러명이 프로그래밍 하면서 변수이름이 겹칠수도 있슴.
//

void main()
{
	printf("%03d\n", 13);
	save();
}=========================================================================================================
Fri Mar 25 14:17:12 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//(3주차 3.21일 )
//책순서를 살펴봄.
//5주 1일차 퀴즈예정(다음주 금요일)
//4장 namespace ,예외처리,호출가능객체.
//5장 pair, smart pointer 
//다음시간에 클래스 상속복습과 bad_cast예외 설명.
//이동의미론 시험에 나옴******* = 이동가능하다면 무조건 이동한다,불가능하다면 복사한다.
//STL사용하려면 이동생성자 이동대입연산자 만들어야 함.
//메모리상태 그림그려보는게 중요함.
//-----------------------------------------------------------------------------------
#include<iostream>
#include"save.h"
#include<vector>
using namespace std;
//메모리 할당 예외
void main()
{
	int i = 1;
	while (true)
	{
		try {
			new char[100000000];
			cout << ++i << endl;
		}
		catch (exception& a)
		{
			cout << a.what() << endl;
			break;
		}
	}
		save();
}=========================================================================================================
Mon Mar 28 13:56:57 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//(3주차 3.21일 )
//책순서를 살펴봄.
//4장 namespace ,예외처리,호출가능객체.
//5장 pair, smart pointer 
//이동의미론 시험에 나옴******* = 이동가능하다면 무조건 이동한다,불가능하다면 복사한다.
//STL사용하려면 이동생성자 이동대입연산자 만들어야 함.
//메모리상태 그림그려보는게 중요함.
//-----------------------------------------------------------------------------------
#include<iostream>
#include"save.h"
#include<vector>
using namespace std;

class Animal {
public:
	virtual void move() = 0;
};
class Dog :public Animal{
public:
	virtual void move() override final 
	{
		cout << "개가 뛴다." << endl;
	}
};
class Bird : public Animal {
public:
	virtual void move() override final
	{
		cout << "새가 난다." << endl;
	}

} ;
//클래스 상속복습과 bad_cast예외 설명.
void f(Animal& a)
{
	//a 가 원래 개였다면 move를 호출.
	try
	{
		Dog& d = dynamic_cast<Dog&>(a);
	}
	catch (exception& a)
	{
		cout << a.what() << endl;
	}

}
void main()
{
	//클래스 상속
	Animal* a[]{ new Dog, new Bird, new Dog };

	//개인 경우만 MOVE
	try
	{
		for (Animal* p : a)
		{
			//if(dynamic_cast<Dog*>(p) != nullptr) // 다운 캐스팅.
			//	p->move();
			f(*p);
		}
	}
	catch (exception& a)
	{
		cout << a.what() << endl;
	}
	save();
}=========================================================================================================
Mon Mar 28 14:34:12 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//(3주차 3.21일 )
//책순서를 살펴봄.
//호출가능객체.
//5장 pair, smart pointer 
//이동의미론 시험에 나옴******* = 이동가능하다면 무조건 이동한다,불가능하다면 복사한다.
//STL사용하려면 이동생성자 이동대입연산자 만들어야 함.
//메모리상태 그림그려보는게 중요함.
//-----------------------------------------------------------------------------------
#include<iostream>
#include"save.h"
#include<algorithm>
using namespace std;
//호출가능타입(callable type)
//1.함수.(함수포인터)
//2.멤버함수.(반드시 객체가 있어야 호출가능함.)
//3.함수객체.(function Object,functor) -
//			함수 호출연산자(function call operator)를 오버로딩한 클래스.
class STL
{
public:
	bool operator()(int a, int b) {
		cout << "호출됨" << a << ',' << b << endl;
		return a < b;
	}

};
void main()
{
	int a[]{ 1,2,3,4,5,6,7,8,9,10};
	sort(begin(a), end(a),STL()); // 객체를 호출가능한 타입으로 만들어서 사용했음.
	/*for (int p : a)
	{
		cout << p << endl;
	}*/
	save();
}=========================================================================================================
Mon Mar 28 14:50:20 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//(3주차 3.28일 )
//책순서를 살펴봄.
//호출가능객체.
//5장 pair, smart pointer 
//이동의미론 시험에 나옴******* = 이동가능하다면 무조건 이동한다,불가능하다면 복사한다.
//STL사용하려면 이동생성자 이동대입연산자 만들어야 함.
//메모리상태 그림그려보는게 중요함.
//-----------------------------------------------------------------------------------
#include<iostream>
#include"save.h"
#include<algorithm>
#include<functional>
using namespace std;
//호출가능타입(callable type)
//1.함수.(함수포인터)
//2.멤버함수.(반드시 객체가 있어야 호출가능함.)
//3.함수객체.(function Object,functor) -
//			함수 호출연산자(function call operator)를 오버로딩한 클래스.
//4.람다-이름없는 함수.
//5.바인더(bind)가 만들어 내는 객체.
//	-기존 호출가능 타입의 인자수를 바꾼 새로운 함수를 만듦.

int add(const int& a, const int &b,const int& c) { return a <b; }

void main()
{
	int a[]{ 1,3,5,2,4 };

	auto f = bind(add, std::placeholders::_1, std::placeholders::_2, 123); // 자리배치기호.
	sort(begin(a), end(a), f);
	for (int b : a)
	{
		cout << b << endl;
	}
	save();
}
=========================================================================================================
Mon Mar 28 15:18:21 2016

=========================================================================================================
//---------------------------------------------------------------------------------
//2016.1.STL 월56,금45
//(3주차 3.28일 )
//책순서를 살펴봄.
//5장 pair, smart pointer,typrtraits 
//이동의미론 시험에 나옴******* = 이동가능하다면 무조건 이동한다,불가능하다면 복사한다.
//STL사용하려면 이동생성자 이동대입연산자 만들어야 함.
//메모리상태 그림그려보는게 중요함.
//-----------------------------------------------------------------------------------
#include<iostream>
#include"save.h"
#include<random>
#include<cmath>
#include<ctime>
using namespace std;

//pair : 이종(heterogeneous)의 자료형을 하나로 묶어 취급할수 있다.
//ex)key value 쌍

//2차원 좌표.pair를 이용하여 프로그램.
//점 100개를 (-100~100)값으로 초기화하자.
//원점에서 거리가 10이내인 점들만 화면에 출력해보자.
void main()
{
	pair<double, double> p[100];
	default_random_engine dre;
	uniform_int_distribution<> ui(-100, 100);
	dre.seed(time(NULL));
	for (pair<double, double>& d : p)
	{
		d.first = ui(dre);
		d.second= ui(dre);
	}

	for (pair<double, double>& d : p)
	{
		if (sqrt(d.first*d.first + d.second * d.second) < 10)
		{
			cout << '(' << d.first << ',' << d.second << ')' << endl;
		}
	}
	save();
}
